# Cerberus validation schema for scripts
script:
  required: true
  type: string

name:
  type: string
  required: true

description:
  required: true
  type: string

lifecycle:
  required: false
  type: dict
  oneof:
    - schema:
        status:
          type: string
          allowed: ["in_development", "in_review", "reviewed", "example"]
          required: true
        message:
          type: string
          required: false
    - schema:
        status:
          type: string
          allowed: ["deprecated"]
          required: true
        message:
          type: string
          required: true

author:
  type: list
  required: true
  schema:
    type: dict
    schema:
      name:
        type: string
        required: true
      email:
        type: string
        required: false
      identifier:
        type: string
        required: false
      role:
        type: string
        required: false

reviewer:
  type: list
  schema:
    type: dict
    schema:
      name:
        type: string
        required: true
      email:
        type: string
        required: false
      identifier:
        type: string
        required: false

license:
  type: string
  required: false

external_link:
  required: false
  nullable: true
  type: string
  regex: '^https?:\/\/(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$'

timeout:
  required: false
  type: number

inputs:
  required: false
  nullable: true
  type: dict
  keysrules:
   type: string
   regex: "[a-z0-9_]+"
  valuesrules:
    schema:
      label:
        required: true
        type: string
      description:
        required: true
        type: string
      type:
        required: true
        type: string
        oneof:
        - forbidden: [options, "options[]", object, "object[]"]
        - allowed: [options, "options[]"]
          dependencies: options
        - allowed: [object, "object[]"]
          dependencies: properties
      options:
        required: false
        type: list
        dependencies:
          type: [options, "options[]"]
      properties:
        required: false
        type: list
        dependencies:
          type: [object, "object[]"]
      example:
        required: true
        nullable: true
        oneof:
        - type: number
        - type: string
          nullable: true
        - type: boolean
        - type: list
        - type: dict
          dependencies:
            type: [object]

outputs:
  required: true
  nullable: false
  type: dict
  keysrules:
   type: string
   regex: "[a-z0-9_]+"
   forbidden: [info, warning, error]
  valuesrules:
    schema:
      label:
        required: true
        type: string
      description:
        required: true
        type: string
      type:
        required: true
        oneof:
          # case where output takes type from input
          - type: dict
            schema:
              from:
                required: true
                type: string
          # normal case, with explicit type
          - type: string
            oneof:
            - forbidden: [options, "options[]", object, "object[]"]
            - allowed: [options, "options[]"]
              dependencies: options
            - allowed: [object, "object[]"]
              dependencies: properties
      options:
        required: false
        type: list
        dependencies:
          type: [options, "options[]"]
      properties:
        required: false
        type: list
        dependencies:
          type: [object, "object[]"]
      range:
        required: false
        type: list
        dependencies:
          type:
            - image/tiff;application=geotiff
            - image/tiff;application=geotiff[]
      example:
        required: false
        nullable: true
        oneof:
        - type: number
        - type: string
          nullable: true
        - type: boolean
        - type: list
        - type: dict
          dependencies:
            type: [object]

references:
  required: false
  nullable: true
  type: list
  schema:
    type: dict
    schema:
      text:
        required: true
        type: string
      doi:
        required: false
        type: string

conda:
  required: false
  type: dict
  schema:
    # The name, usually in conda spec, is overriden by BON in a Box to avoid name clashes.
    # name:
    #   required: true
    #   type: string
    channels:
      required: true
      type: list
    dependencies:
      required: true
      type: list
