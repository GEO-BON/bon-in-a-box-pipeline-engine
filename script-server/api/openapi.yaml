openapi: 3.0.3
info:
  title: BON in a Box - Script service
  contact:
    email: jean-michel.lord@mcgill.ca
  version: 1.0.0
servers:
  - url: http://localhost/
    description: script service
tags:
  - name: placeholder
    description: We could use tags
paths:
  /{type}/list:
    get:
      summary: Get a list of available steps of given type and their names.
      operationId: getListOf
      parameters:
        - $ref: '#/components/parameters/stepType'
      responses:
        "200":
          description:
            Map of step description files to their names.
            Script description files are located in the /script folder.
            Pipeline description files are located in the /pipeline folder.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                example:
                  {
                    "SHI.yml": "Species Habitat Index",
                    "Folder>SDM.yml": "Species distribution model",
                  }
  /api/history:
    get:
      summary: Get the history of runs for all pipelines on this server, or using pagination with start and limit.
      operationId: getHistory
      parameters:
        - name: start
          in: query
          description: Start index for pagination
          required: false
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: Limit the number of results
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: |
            An object containing two lists: the currently running pipelines,
            and the finished pipelines, with their inputs and status. The list
            contains exclusively runs from this instance.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    runId:
                      description: Where to find the pipeline outputs in ./output folder.
                      type: string
                      example: path>to>script>hash
                    type:
                      description: If it's a script or a pipeline
                      type: string
                      enum: [script, pipeline]
                      example: pipeline
                    startTime:
                      description: UTC date and time when the run was started
                      type: string
                      format: date-time
                      example: 2024-01-01 T 00:00
                    status:
                      description: Information on the completion status
                      type: string
                      enum: [running, error, cancelled, completed]
                    inputs:
                      description: Inputs that were given to the pipeline form for this run.
                      type: object
                example:
                  [
                    {
                      runId: "path>to>script>hash",
                      type: "script",
                      startTime: "2024-01-01 00:00",
                      inputs: {
                        input1: "value",
                        input2: "value"
                      },
                      status: "completed"
                    },
                  ]

  /pipeline/save/{filename}:
    post:
      summary: Save a json file to the pipeline folder.
      operationId: savePipeline
      parameters:
        - name: filename
          in: path
          description: The name of the JSON file (without extension).
          required: true
          schema:
            type: string
      requestBody:
        description: Content of pipeline.json to save
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        "200":
          description: File saved (check body for pipeline validation errors)
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              examples:
                success:
                  value: saved
                warning:
                  value: |
                    Pipeline saved with errors:
                    helloWorld>helloPython.yml@0: Wrong type "text" for input "some_int", "int" expected.
        default:
          description: |
            An error occurred, check body for details.
            Possible errors are server config blocking save API, invalid json file, IO errors.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
              example:
                503:
                  value: |
                    This server does not allow "Save to server" API.
                    Use "Save to clipboard" and submit file through git.
  /{type}/{descriptionPath}/info:
    get:
      tags: []
      summary: Get metadata about this script or pipeline.
      operationId: getInfo
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/descriptionPath'
      responses:
        "200":
          description: Returns the metadata, in JSON format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
        "400":
          description: Bad request
        "404":
          description: Step not found
  /pipeline/{descriptionPath}/get:
    get:
      summary: Get JSON file that describes the pipeline.
      operationId: getPipeline
      parameters:
        - $ref: '#/components/parameters/descriptionPath'
      responses:
        "200":
          description: Returns the complete pipeline, in JSON format
          content:
            application/json:
              schema:
                type: object
                nullable: false
              example:
                {
                  "nodes": [
                    {
                      "id": "0",
                      "type": "io",
                      "position": {
                        "x": 236.8125,
                        "y": 287
                      },
                      "data": {
                        "descriptionFile": "helloWorld>helloPython.yml"
                      }
                    },
                    {
                      "id": "1",
                      "type": "output",
                      "position": {
                        "x": 593.8125,
                        "y": 289
                      },
                      "data": {
                        "label": "Output"
                      }
                    }
                  ],
                  "edges": [
                    {
                      "source": "0",
                      "sourceHandle": "increment",
                      "target": "1",
                      "targetHandle": null,
                      "id": "reactflow__edge-0increment-1"
                    }
                  ],
                  "inputs": {
                    "helloWorld>helloPython.yml@0|some_int": {
                      "description": "A number that we will increment",
                      "label": "Some int",
                      "type": "int",
                      "example": 3
                    }
                  },
                  "outputs": {
                    "helloWorld>helloPython.yml@0|increment": {
                      "description": "bla bla",
                      "label": "A number (input++)",
                      "type": "int",
                      "example": 4
                    }
                  }
                }
        "400":
          description: Bad request
        "404":
          description: Pipeline not found
  /{type}/{descriptionPath}/run:
    post:
      tags: []
      summary: Runs the script or pipeline matching `descriptionPath`.
      operationId: run
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/descriptionPath'
        - in: query
          name: callback
          schema:
            type: string
          description:
            Optional callback url called upon pipeline completion, only if the call to /run responds 200 OK.
            When receiving the callback, check the outputs or the history to know
            if the pipeline completed successfully.
      requestBody:
        $ref: '#/components/requestBodies/run_input_body'
      responses:
        "200":
          description:
            Returns the unique ID for this run.
            It corresponds to the unique output folder.
          content:
            text/plain:
              schema:
                type: string
                example: "HelloWorld/Hello World/88204814d39b762f933d67d9a3d68832"
                x-content-type: text/plain
        "400":
          description: Bad request
        "404":
          description: Script or pipeline not found
      callbacks:
        runComplete:
          "{$request.query.callbackUrl}":
            get:
              responses:
                "202":
                  description:
                    Your server implementation should return this HTTP status code
                    if the callback was received successfully.
                "500":
                  description: |
                    500 or any error code can be returned when a problem occurs.
                    Nothing special will be done with it: the current
                    script-server implementation simply discard the error.

  /{type}/{id}/outputs:
    get:
      tags: []
      summary: Get the output folders of the scripts composing this pipeline
      operationId: getOutputFolders
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/runId'
      responses:
        "200":
          description: List of output folders for all the scripts.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
              examples:
                success:
                  value:
                    id1: Folder/Script_ext/88204814d39b762f933d67d9a3d68832
                    id2: Folder/Script2/1a015dccdfb7f639ec32c278506e7c5a
                error:
                  value:
                    error: An error message that happened outside of script execution.
                    id1: Folder/Script_ext/88204814d39b762f933d67d9a3d68832
                    id2: skipped

        "400":
          description: Bad request
        "404":
          description: id not found
  /{type}/{id}/stop:
    get:
      summary: Stop the specified pipeline run.
      operationId: stop
      parameters:
        - $ref: '#/components/parameters/stepType'
        - $ref: '#/components/parameters/runId'
      responses:
        "200":
          description: Pipeline run is stopped (or was already stopped)
        "400":
          description: Bad request
        "404":
          description: id not found
  /api/systemStatus:
    get:
      summary: Returns the system status.
      operationId: getSystemStatus
      responses:
        "200":
          description: System is in good condition.
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
                example: OK
        "503":
          description: System has a bad configuration
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
                example: Output folder is improperly configured
  /api/versions:
    get:
      summary: Returns the version of system components.
      operationId: getVersions
      responses:
        "200":
          description: The version of system components.
          content:
            application/json:
              schema:
                type: object
                example: 
                  {
                    "UI": "2023-09-07 19:24",
                    "Script server": "2023-09-07 19:24",
                    "Python": "Python 3.10.6",
                    "R runner": "2023-09-07 19:24",
                    "Rscript": "Rscript (R) version 4.2.3 (2023-03-15)",
                    "Julia runner": "2023-09-07 19:24",
                    "Julia": "julia version 1.8.1",
                    "TiTiler": "2023-08-30 15:44"
                  }

  /hpc/status:
    get:
      summary: Get status of HPC connection.
      operationId: getHPCStatus
      responses:
        "200":
          description: The status of the HPC connection.
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    state:
                      type: string
                      enum: [NOT_CONFIGURED, CONFIGURED, PREPARING, READY, ERROR]
                    image:
                      type: string
                    message:
                      type: string
              examples:
                ready:
                  value: {"R":{"state":"READY","image":"geobon/bon-in-a-box@sha256:34acee6db172b55928aaf1312d5cd4d1aaa4d6cc3e2c030053aed1fe44fb2c8e","message":""},"Python":{"state":"READY","image":"geobon/bon-in-a-box@sha256:34acee6db172b55928aaf1312d5cd4d1aaa4d6cc3e2c030053aed1fe44fb2c8e","message":""},"Julia":{"state":"READY","image":"geobon/bon-in-a-box@sha256:5a808f9c89fc23303bd23510f15a9111799cc8ba4e2cd76b1e7797326b4923e7","message":""}}
                not_configured:
                  value: {"R":{"state":"NOT_CONFIGURED"},"Python":{"state":"NOT_CONFIGURED"},"Julia":{"state":"NOT_CONFIGURED"}}
                configured:
                  value: {"R":{"state":"CONFIGURED"},"Python":{"state":"CONFIGURED"},"Julia":{"state":"CONFIGURED"}}
                error:
                  value: {"R":{"state":"ERROR","message":"Some error message for Conda runner"},"Python":{"state":"ERROR","message":"Some error message for Conda runner"},"Julia":{"state":"ERROR","message":"Some error message for Julia runner"}}

  /hpc/prepare:
    get:
      summary:
        Prepare the HPC to run tasks from BON in a Box.
        The apptainer images will be created for every runner.
      responses:
        "200":
          description: |
            The HPC preparation has been launched.
            Watch /hpc/status for changes.

        "503":
          description: |
            Service unavailable: the HPC has not been configured on that host.

components:
  parameters:
    stepType:
      name: type
      in: path
      description: Script or pipeline
      required: true
      style: simple
      explode: false
      schema:
        type: string
        enum: [script, pipeline]
    descriptionPath:
      name: descriptionPath
      in: path
      description:
        Where to find the step.
        For scripts, paths are relative to the /script folder.
        For pipelines, paths are relative to the /pipeline folder.
      required: true
      style: simple
      explode: false
      schema:
        type: string
    runId:
      name: id
      in: path
      description: |
        Where to find the pipeline or step outputs in ./output folder.
        It also acts as a handle to stop the run.
      required: true
      style: simple
      explode: false
      schema:
        type: string
  schemas:
    info:
      type: object
      properties:
        script:
          type: string
          example: helloR.R
        name:
          type: string
          example: R Example
        description:
          type: string
          example: This sample script shows how it works.
        lifecycle:
          type: object
          properties:
            status:
              type: string
              enum: [in_development, in_review, reviewed, deprecated, example]
              default: in_development
            message:
              type: string
          example:
            - status: in_development
            - status: deprecated
              message: Message explaining why it's deprecated and what to choose instead
        author:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Full name of the author
              email:
                type: string
                format: email
                description: Email of the author
              identifier:
                type: string
                description: Full URL of a unique digital identifier such as an ORCID
              role:
                type: string
                description: Role of the author in the contribution. We recommend to use CRediT roles (https://credit.niso.org/)
          example:
            - name: Jane Doe
            - name: John Doe
              email: john.doe@example.org
              identifier: https://orcid.org/0000-0000-0000-0000
              role: Software
        reviewer:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: Full name of the reviewer
              email:
                type: string
                format: email
                description: Email of the reviewer
              identifier:
                type: string
                description: Full URL of a unique digital identifier such as an ORCID
          example:
            - name: Jane Doe
            - name: John Doe
              email: john.doe@example.org
              identifier: https://orcid.org/0000-0000-0000-0000
        license:
          type: string
          example: CC BY
        external_link:
          type: string
          example: https://github.com/GEO-BON/biab-2.0
        timeout:
          type: number
          example: 60
        inputs:
          type: object
          additionalProperties:
            type: object
            properties:
              description:
                type: string
                example: scientific name of the species
              label:
                type: string
                example: species names
              weight:
                type: number
                example: 1
                description: The weight is used to sort inputs in the client UI.
              type:
                type: string
                example: text
              options:
                type: array
                items:
                  type: string
                example:
                  - Option 1
                  - Option 2
              properties:
                type: array
                items:
                  type: string
                example:
                  - id
                  - layer
              example:
                example: Glyptemys insculpta
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                    items:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
        outputs:
          type: object
          additionalProperties:
            type: object
            properties:
              description:
                type: string
                example: coordinate of occurances in
              label:
                type: string
                example: occurences
              weight:
                type: number
                example: 1
                description: The weight is used to sort outputs in the client UI.
              type:
                type: string
                example: text/csv
              range:
                type: array
                items:
                  type: number
                minItems: 2
                maxItems: 2
                example: [0, 1]
              options:
                type: array
                items:
                  type: string
                example:
                  - Option 1
                  - Option 2
              properties:
                type: array
                items:
                  type: string
                example:
                  - id
                  - layer
              example:
                example: file.csv
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: array
                    items:
                      oneOf:
                        - type: string
                        - type: number
                        - type: boolean
        references:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                example: Rick Bonney Expanding the Impact of Citizen Science BioScience Volume 71 Issue 5 May 2021 Pages 448–451
              doi:
                type: string
                example: 10.1093/biosci/biab041
  requestBodies:
    run_input_body:
      description: Content of input.json for this run
      required: false
      content:
        text/plain:
          schema:
            type: string
            example:
              {
                "occurence":"/output/result/from/previous/script",
                "intensity":3
              }


